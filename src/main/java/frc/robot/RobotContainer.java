// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.WaitCommand;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.XboxController.Button;
import frc.robot.subsystems.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final Example m_example = new Example();
    public final Drive m_drive = new Drive();
    public final Manipulator m_manipulator = new Manipulator();

// Joysticks

  
// commands
  private final AutoCommand m_autoCommand = new AutoCommand(m_drive);

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
private final XboxController xInput = new XboxController(0);

//joystick buttons
private final JoystickButton leftBumper = new JoystickButton(xInput, XboxController.Button.kLeftBumper.value);
private final JoystickButton rightBumper = new JoystickButton(xInput, XboxController.Button.kRightBumper.value);

    //commands
    private final TeleopCommand m_teleopCommand = new TeleopCommand(m_drive, m_manipulator);
  private RobotContainer() {
    configureButtonBindings();
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
    leftBumper.whileHeld(new DeployCommand(m_manipulator, -Constants.ManipulatorConstants.deploySpeed));
    rightBumper.whileHeld(new DeployCommand(m_manipulator, Constants.ManipulatorConstants.deploySpeed));
  }
public double[] getYAxes() {
      double[] sticks = {xInput.getLeftY(),xInput.getRightY()};
      return sticks;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return new WaitCommand(1);
  }

  public Command getTeleopCommand(){
    return m_teleopCommand;
  }
  
  public double getRightTrigger() {
    double rightTrigger = xInput.getRightTriggerAxis();
    return rightTrigger;
  }

  public double getLeftTrigger() {
    double leftTrigger = xInput.getLeftTriggerAxis();
    return leftTrigger;
  }
}

