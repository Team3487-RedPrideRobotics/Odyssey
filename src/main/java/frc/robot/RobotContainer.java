// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.WaitCommand;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.networktables.EntryListenerFlags;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.XboxController.Button;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import frc.robot.subsystems.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final Example m_example = new Example();
    public final Drive m_drive = new Drive();
    public final Manipulator m_manipulator = new Manipulator();
    public final Climbing m_climb = new Climbing();
// Joysticks

  
// commands
  private final AutoCommand m_autoCommand = new AutoCommand(m_drive);

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
private final XboxController xInput = new XboxController(0);
private final XboxController fightStick = new XboxController(1);

//joystick buttons
private JoystickButton deployButton = new JoystickButton(xInput, XboxController.Button.kLeftBumper.value);
private JoystickButton retractButton = new JoystickButton(xInput, XboxController.Button.kRightBumper.value);

public static final String controlFightStick = "Xbox + FightStick";
public static final String controlXbox = "Xbox";

private JoystickButton suckButton = new JoystickButton(fightStick, 3);
private JoystickButton blowButton = new JoystickButton(fightStick, 4);

private String currentScheme = controlXbox;



    //commands
    private final TeleopCommand m_teleopCommand = new TeleopCommand(m_drive, m_manipulator, m_climb);

    private SendableChooser<String> controlScheme;

    private NetworkTableEntry controlEntry;

    private boolean digitalIntake = false;

  private RobotContainer() {
        controlScheme = new SendableChooser<String>();
        controlScheme.addOption(controlFightStick, controlFightStick);
        controlScheme.setDefaultOption(controlXbox, controlXbox);
        Shuffleboard.getTab("Teleop").add("Control Scheme", controlScheme);
        
        controlEntry = NetworkTableInstance.getDefault().getTable("Shuffleboard").getSubTable("Teleop").getSubTable("Control Scheme").getEntry("active");

        controlEntry.addListener(event -> {
            checkControls();
        }, EntryListenerFlags.kNew | EntryListenerFlags.kUpdate);
    checkControls();
    configureButtonBindings();
  }

  private void checkControls() {

        String selected = controlScheme.getSelected();
        if(selected.equals(currentScheme)) {
            return;
        }
        if(selected.equals(controlFightStick)) {
            deployButton = new JoystickButton(fightStick, 1);
            retractButton = new JoystickButton(fightStick, 2);
            digitalIntake = true;

        } else {
            deployButton = new JoystickButton(xInput, XboxController.Button.kLeftBumper.value);
            retractButton = new JoystickButton(xInput, XboxController.Button.kRightBumper.value);
            digitalIntake = false;
        }
        
        configureButtonBindings();

        currentScheme = selected;
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
  }
public double[] getYAxes() {
      double[] sticks = {xInput.getLeftY(),xInput.getRightY()};
      return sticks;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return new WaitCommand(1);
  }

  public Command getTeleopCommand(){
    return m_teleopCommand;
  }
  
  public double getRightTrigger() {
    if(digitalIntake){
      if(blowButton.get()){
        return 1;
      }else{
        return 0;
      }
    }else{
      double rightTrigger = xInput.getLeftTriggerAxis();
      return rightTrigger;
    }
  }

  public double getLeftTrigger() {
    if(digitalIntake){
      if(suckButton.get()){
        return 1;
      }else{
        return 0;
      }
    }else{
      double leftTrigger = xInput.getRightTriggerAxis();
      return leftTrigger;
    }
  }

  public boolean getLeftBumper() {
    return deployButton.get();
  }

  public boolean getRightBumper() {
    return retractButton.get();
  }

  public int getDPad(){
    if(controlScheme.getSelected() == controlXbox){
      return xInput.getPOV();
    }else{
      return fightStick.getPOV();
    }
  }
}

