
// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


import frc.robot.Constants;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.motorcontrol.PWMVictorSPX;
import edu.wpi.first.wpilibj.motorcontrol.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Manipulator extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private Spark manipulatorInput;
private Spark manipulatorDeploy;
    //M stands for moving hook, these will manage the moving hook
    DigitalInput topMLimitSwitch = new DigitalInput(6); //top moving limit switch
    DigitalInput bottomMLimitSwitch = new DigitalInput(7); //bottom moving limit switch
    DigitalInput elevatorSwitch = new DigitalInput(8); //elevation moving limit switch
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Manipulator() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
manipulatorInput = new Spark(Constants.ManipulatorConstants.inputPort);

 
manipulatorDeploy = new Spark(Constants.ManipulatorConstants.deployPort);




        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void deploySetSpeed(double speed){
        manipulatorDeploy.set(speed);
        
    }

    public void inputSetSpeed(double speed){
        manipulatorInput.set(speed);
        
    }





    public void setMLimits(double speed){ //The switches will STOP the hook from trying to "swing off"
        if (speed > 0) {
            if (topMLimitSwitch.get()) {
                //this will be where the moving hook would go for speed control
            } else {
                //everything that looks like this is the same
            }
        } else {
            if (bottomMLimitSwitch.get()) {
                
            } else {
            
            }
        }
    }

    

    public void setELimits(double speed) { //So the hook doesnt stab the robot
        if (speed > 0) {
            if (elevatorSwitch.get()) {
                //elevated movement there you go
            } else {
                //done
            }
        } 
    }
}


