// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.commands;
import javax.swing.plaf.synth.SynthStyle;

import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.subsystems.Drive;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class TurnCommand extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    private double angle;
    private Drive drive;
    private double speed;
    private boolean finished = false;
    private double debug;

    public TurnCommand(Drive m_drive, double m_angle, double m_speed) {
        angle = m_angle;
        drive = m_drive;
        speed = m_speed;
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        drive.resetGyro();
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        debug = drive.getHeading();
        System.out.println(debug);
        if(angle > 0){
            if(drive.getHeading() >= angle){
                finished = true;
                drive.tankDriveRaw(0, 0);
            }else{
                drive.tankDriveRaw(speed, -speed);
            }
        }else{
            if(angle < 0){
                if(drive.getHeading() <= angle){
                    finished = true;
                    drive.tankDriveRaw(0, 0);
                }else{
                    drive.tankDriveRaw(-speed, speed);
                }
            }else{
                drive.tankDriveRaw(0, 0);
            }        
    
        }
    }
    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        drive.tankDriveRaw(0, 0);
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return finished;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
